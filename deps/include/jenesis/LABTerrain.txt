

#pragma once



#include <gl/glew.h> // holds all OpenGL type declarations

#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtx/transform.hpp>

#include <jenesis/Shader.h>
#include <jenesis/Vertex.h>

#include <string>
#include <vector>



class PlaneGround {

    public:

        // Default Constructor
        PlaneGround(){}


        // constructor
        PlaneGround(glm::vec4 color)
        {
            this->model = glm::mat4(1.0f);

            this->color = color;

            fillGrid();

            // now that we have all the required data, set the vertex buffers and its attribute pointers.
            setupTerrain(this->vertices);
        }

        void setMatrices(glm::mat4 projection)
        {
            this->projection = projection;

            this->shader = new Shader("res/shaders/basic_vert.glsl", "res/shaders/basic_frag.glsl");
            shader->use();
            shader->setMat4("projection", projection);
        }

        void rotate(float dt, glm::vec3 amount)
        {
            glm::mat4 trans = glm::mat4(1.0f);
            trans = glm::rotate(trans, dt, amount);
            model = model * trans;
        }

        void translate(glm::vec3 amount)
        {
            glm::mat4 trans = glm::mat4(1.0f);
            trans = glm::translate(trans, amount);
            model = model * trans;
        }


        glm::vec4 getColor()
        {
            return this->color;
        }

        void setColor(glm::vec4 color)
        {
            this->color = color;
        }

        void setColor(float red, float green, float blue, float alpha)
        {
            this->color.x = red;
            this->color.y = green;
            this->color.z = blue;
            this->color.w = alpha;
        }

        // render the mesh
        void Draw(Camera camera)
        {
            this->shader->use();
            this->view = camera.GetViewMatrix();
            shader->setMat4("view", view);


            glBindVertexArray(VAO);

            // retrieve the matrix uniform locations
            unsigned int modelLoc = glGetUniformLocation(shader->ID, "model");
            // pass them to the shaders
            glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));

            // retrieve color location
            unsigned int colorLoc = glGetUniformLocation(shader->ID, "aColor");
            // pass color to shader
            glUniform4f(colorLoc, color.x, color.y, color.z, color.w);

            glDrawElements(GL_TRIANGLES, IND, GL_UNSIGNED_INT, NULL);
        }

    private:


        // render data 
        unsigned int VBO, VAO, IBO;

        unsigned int terrainCount = 0;

        unsigned int n = 10;

        unsigned int vertSize = n*n;
        Vertex* vertices = new Vertex[vertSize];

        unsigned int IND = 6 * (n-1) * (n-1);
        unsigned int* indices = new unsigned int[IND];
        unsigned int T = IND / 3;

        Vertex *vertexPtr = vertices;
        unsigned int *indexPtr = indices;

        std::vector<glm::uvec3> triangles;

        glm::vec3 upVector = glm::vec3(0.0f, 1.0f, 0.0f);

        glm::vec4 color;

        // MVP Matrices
        glm::mat4 model, view, projection;

        Shader* shader;



        void fillGrid()
        {

            // *(vertices+0) = Vertex(glm::vec3(-0.5f, 0, -0.5f), upVector);
            // *(vertices+1) = Vertex(glm::vec3( 0.5f, 0, -0.5f), upVector);
            // *(vertices+2) = Vertex(glm::vec3(-0.5f, 0,  0.5f), upVector);
            // *(vertices+3) = Vertex(glm::vec3( 0.5f, 0,  0.5f), upVector);

            // *(indices+0) = 0;
            // *(indices+1) = 1;
            // *(indices+2) = 2;
            // *(indices+3) = 2;
            // *(indices+4) = 1;
            // *(indices+5) = 3;

            int i = 0;

            for(unsigned int x=0 ; x<n ; x++) for(unsigned int z=0; z<n ; z++)
            {
                *vertexPtr++ = Vertex(glm::vec3((x/(float)n) - 0.5f, 0, (z/(float)n) - 0.5f), upVector);

                // if (i + 1 % n != 0 && z+1 < n)
                // {
                    // glm::uvec3 tri  = glm::uvec3(i, i+n, i+n+1);
                    // glm::uvec3 tri2 = glm::uvec3(i, i+n+1, i+1);

                // }

            }

            for(unsigned int x=0 ; x<n-1 ; x++) for(unsigned int z=0; z<n-1 ; z++)
            {
                    *indexPtr++ = i;
                    *indexPtr++ = i+n;
                    *indexPtr++ = i+n+1;

                    *indexPtr++ = i;
                    *indexPtr++ = i+n+1;
                    *indexPtr++ = i+1;                
                i++;
            }

            // terrainCount = triangles.size();


                // *(vertices + 0)  = Vertex(glm::vec3(-0.5f, 0.0f, -0.5f), upVector);
                // *(vertices + 1)  = Vertex(glm::vec3( 0.0f, 0.0f, -0.5f), upVector);
                // *(vertices + 2)  = Vertex(glm::vec3(-0.5f, 0.0f,  0.0f), upVector);
                // *(vertices + 3)  = Vertex(glm::vec3( 0.0f, 0.0f, -0.5f), upVector);
                // *(vertices + 4)  = Vertex(glm::vec3(-0.5f, 0.0f,  0.0f), upVector);
                // *(vertices + 5)  = Vertex(glm::vec3( 0.0f, 0.0f,  0.0f), upVector);
 
                // *(vertices + 6)  = Vertex(glm::vec3( 0.0f, 0.0f,  0.0f), upVector);
                // *(vertices + 7)  = Vertex(glm::vec3( 0.0f, 0.0f, -0.5f), upVector);
                // *(vertices + 8)  = Vertex(glm::vec3( 0.5f, 0.0f,  0.0f), upVector);
                // *(vertices + 9)  = Vertex(glm::vec3( 0.0f, 0.0f, -0.5f), upVector);
                // *(vertices + 10) = Vertex(glm::vec3( 0.5f, 0.0f,  0.0f), upVector);
                // *(vertices + 11) = Vertex(glm::vec3( 0.5f, 0.0f, -0.5f), upVector);

                // *(vertices + 12) = Vertex(glm::vec3( 0.5f, 0.0f,  0.0f), upVector);
                // *(vertices + 13) = Vertex(glm::vec3( 0.0f, 0.0f,  0.0f), upVector);
                // *(vertices + 14) = Vertex(glm::vec3( 0.5f, 0.0f,  0.5f), upVector);
                // *(vertices + 15) = Vertex(glm::vec3( 0.0f, 0.0f,  0.0f), upVector);
                // *(vertices + 16) = Vertex(glm::vec3( 0.5f, 0.0f,  0.5f), upVector);
                // *(vertices + 17) = Vertex(glm::vec3( 0.0f, 0.0f,  0.5f), upVector);

                // *(vertices + 18) = Vertex(glm::vec3( 0.0f, 0.0f,  0.5f), upVector);
                // *(vertices + 19) = Vertex(glm::vec3( 0.0f, 0.0f,  0.0f), upVector);
                // *(vertices + 20) = Vertex(glm::vec3(-0.5f, 0.0f,  0.5f), upVector);
                // *(vertices + 21) = Vertex(glm::vec3( 0.0f, 0.0f,  0.0f), upVector);
                // *(vertices + 22) = Vertex(glm::vec3(-0.5f, 0.0f,  0.5f), upVector);
                // *(vertices + 23) = Vertex(glm::vec3(-0.5f, 0.0f,  0.0f), upVector);
        }



        // initializes all the buffer objects/arrays
        void setupTerrain(Vertex* vertices)
        {
            // create buffers/arrays
            glGenVertexArrays(1, &VAO);
            glBindVertexArray(VAO);
            glGenBuffers(1, &VBO);
            glGenBuffers(1, &IBO);


            glBindBuffer(GL_ARRAY_BUFFER, VBO);
            glBufferData(GL_ARRAY_BUFFER, vertSize * sizeof(Vertex), &vertices[0], GL_STATIC_DRAW);
            // glBindVertexArray(VAO);

            glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, IBO);
            glBufferData(GL_ELEMENT_ARRAY_BUFFER, IND * sizeof(unsigned int), indices, GL_STATIC_DRAW);
            // glBindVertexArray(VAO);

            // set the vertex attribute pointers
            // vertex Positions
            glEnableVertexAttribArray(0);
            glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, sizeof(Vertex), (void*)0);

            // vertex normals
            glEnableVertexAttribArray(1);
            glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, sizeof(Vertex), (void*) (3 * sizeof(float)) );

            glBindVertexArray(0);

            // glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
        }
};